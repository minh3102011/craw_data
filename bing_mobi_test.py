from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import random
import time
import traceback
import hashlib
import os
import json
import signal
import sys
import urllib.parse
import logging
import requests
from datetime import datetime
from pytrends.request import TrendReq
import string

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bing_search.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# C·∫•u h√¨nh
EDGE_DRIVER_PATH = r"driver\msedgedriver.exe"
MAX_SEARCHES = 30
MAX_RETRIES = 3
KEYWORD_CACHE_FILE = "keyword_cache.json"
HOT_KEYWORDS_FILE = "hot_keywords.json"
TIMEOUT = 8  # Timeout t·ªëi ∆∞u cho t·ªëc ƒë·ªô
TREND_PERIOD = "yearly"  # "daily", "weekly", "monthly", "yearly"
CHAR_ARRAY = list(string.ascii_lowercase + string.digits)  # M·∫£ng k√Ω t·ª± cho t·ª´ kh√≥a ng·∫´u nhi√™n

# M·∫£ng t·ª´ kh√≥a d·ª± ph√≤ng
FALLBACK_KEYWORDS = [
    "tr√≠ tu·ªá nh√¢n t·∫°o", "h·ªçc m√°y", "h·ªçc s√¢u", "m·∫°ng n∆°-ron", "x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n",
    "th·ªã gi√°c m√°y t√≠nh", "h·ªçc li√™n k·∫øt", "AI gi·∫£i th√≠ch ƒë∆∞·ª£c", "AI t·ªïng qu√°t", "t·ª± ƒë·ªông h√≥a",
    "chatbot", "gi·ªçng n√≥i nh√¢n t·∫°o", "ph√¢n t√≠ch d·ª± ƒëo√°n", "d·ªØ li·ªáu l·ªõn", "ph√¢n t√≠ch d·ªØ li·ªáu",
    "ƒëi·ªán to√°n ƒë√°m m√¢y", "ƒëi·ªán to√°n bi√™n", "ƒëi·ªán to√°n l∆∞·ª£ng t·ª≠", "ph·∫ßn m·ªÅm m√£ ngu·ªìn m·ªü",
    "DevOps", "low code", "no code", "ph√°t tri·ªÉn ph·∫ßn m·ªÅm", "l·∫≠p tr√¨nh Python", "l·∫≠p tr√¨nh Java",
    "blockchain", "ti·ªÅn ƒëi·ªán t·ª≠", "an ninh m·∫°ng", "th·ª±c t·∫ø ·∫£o", "th·ª±c t·∫ø tƒÉng c∆∞·ªùng",
    "internet v·∫°n v·∫≠t", "robotics", "t·ª± ƒë·ªông h√≥a quy tr√¨nh", "ph√¢n t√≠ch c·∫£m x√∫c",
    "m·∫°ng 5G", "truy·ªÅn th√¥ng kh√¥ng d√¢y", "nƒÉng l∆∞·ª£ng t√°i t·∫°o", "c√¥ng ngh·ªá xanh",
    "in 3D", "c√¥ng ngh·ªá nano", "c√¥ng ngh·ªá sinh h·ªçc", "y h·ªçc s·ªë", "genomics",
    "xe t·ª± l√°i", "giao th√¥ng th√¥ng minh", "th√†nh ph·ªë th√¥ng minh", "n√¥ng nghi·ªáp th√¥ng minh",
    "fintech", "edtech", "healthtech", "proptech", "logistics th√¥ng minh"
]

driver = None

def signal_handler(sig, frame):
    """X·ª≠ l√Ω t√≠n hi·ªáu Ctrl+C."""
    logging.info("üõë ƒê√£ nh·∫≠n t√≠n hi·ªáu h·ªßy (Ctrl+C). ƒêang ƒë√≥ng tr√¨nh duy·ªát...")
    if driver:
        try:
            driver.quit()
        except:
            pass
    logging.info("‚úÖ Ch∆∞∆°ng tr√¨nh ƒë√£ tho√°t.")
    sys.exit(0)

def load_keyword_cache():
    """T·∫£i cache t·ª´ kh√≥a ƒë√£ s·ª≠ d·ª•ng."""
    try:
        if os.path.exists(KEYWORD_CACHE_FILE):
            with open(KEYWORD_CACHE_FILE, 'r', encoding='utf-8') as f:
                return set(json.load(f).get('used_keywords', []))
        return set()
    except Exception as e:
        logging.error(f"‚ö†Ô∏è L·ªói khi t·∫£i cache t·ª´ kh√≥a: {e}")
        return set()

def save_keyword_cache(used_keywords):
    """L∆∞u cache t·ª´ kh√≥a ƒë√£ s·ª≠ d·ª•ng."""
    try:
        with open(KEYWORD_CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump({'used_keywords': list(used_keywords)}, f, ensure_ascii=False)
    except Exception as e:
        logging.error(f"‚ö†Ô∏è L·ªói khi l∆∞u cache t·ª´ kh√≥a: {e}")

def generate_random_keyword():
    """T·∫°o t·ª´ kh√≥a ng·∫´u nhi√™n t·ª´ m·∫£ng k√Ω t·ª±."""
    length = random.randint(5, 10)
    return ''.join(random.choice(CHAR_ARRAY) for _ in range(length))

def get_google_suggestions(query):
    """L·∫•y g·ª£i √Ω t√¨m ki·∫øm t·ª´ Google."""
    try:
        url = f"http://suggestqueries.google.com/complete/search?client=firefox&q={urllib.parse.quote(query)}"
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        suggestions = response.json()[1]
        return [s for s in suggestions if s not in load_keyword_cache()][:10]
    except Exception as e:
        logging.error(f"‚ö†Ô∏è L·ªói khi l·∫•y g·ª£i √Ω Google: {e}")
        return []

def get_hot_keywords(period="daily"):
    """L·∫•y t·ª´ kh√≥a hot t·ª´ Google Trends theo k·ª≥."""
    cache_file = HOT_KEYWORDS_FILE
    today = datetime.now().strftime("%Y-%m-%d")
    
    # Ki·ªÉm tra cache
    if os.path.exists(cache_file):
        with open(cache_file, 'r', encoding='utf-8') as f:
            cache = json.load(f)
        if cache.get('date') == today and cache.get('period') == period and cache.get('keywords'):
            logging.info(f"üìö S·ª≠ d·ª•ng t·ª´ kh√≥a hot t·ª´ cache ({period}).")
            return cache['keywords']
    
    max_retries = 3
    regions = ["vietnam", "united_states", None]
    
    for region in regions:
        for attempt in range(max_retries):
            try:
                logging.info(f"üåê ƒêang l·∫•y t·ª´ kh√≥a hot t·ª´ Google Trends (khu v·ª±c: {region or 'to√†n c·∫ßu'}, k·ª≥: {period}, l·∫ßn {attempt + 1}/{max_retries})...")
                pytrends = TrendReq(hl="vi-VN", tz=420, retries=2, backoff_factor=0.2)
                
                # L·∫•y t·ª´ kh√≥a theo k·ª≥
                if period == "daily":
                    trending_searches = pytrends.trending_searches(pn=region).head(50)[0].tolist()
                elif period == "weekly":
                    pytrends.build_payload(kw_list=["c√¥ng ngh·ªá"], timeframe='now 7-d', geo='VN')
                    trending_searches = pytrends.related_queries()['c√¥ng ngh·ªá']['top']['query'].tolist()
                elif period == "monthly":
                    pytrends.build_payload(kw_list=["c√¥ng ngh·ªá"], timeframe='now 30-d', geo='VN')
                    trending_searches = pytrends.related_queries()['c√¥ng ngh·ªá']['top']['query'].tolist()
                elif period == "yearly":
                    pytrends.build_payload(kw_list=["c√¥ng ngh·ªá"], timeframe='today 12-m', geo='VN')
                    trending_searches = pytrends.related_queries()['c√¥ng ngh·ªá']['top']['query'].tolist()
                else:
                    trending_searches = pytrends.trending_searches(pn=region).head(50)[0].tolist()
                
                if not trending_searches:
                    raise ValueError("Kh√¥ng l·∫•y ƒë∆∞·ª£c t·ª´ kh√≥a t·ª´ Google Trends.")
                
                # L·ªçc t·ª´ kh√≥a ƒë√£ s·ª≠ d·ª•ng
                used_keywords = load_keyword_cache()
                trending_searches = [k for k in trending_searches if k not in used_keywords]
                
                cache = {"date": today, "period": period, "keywords": trending_searches}
                with open(cache_file, 'w', encoding='utf-8') as f:
                    json.dump(cache, f, ensure_ascii=False)
                logging.info(f"‚úÖ ƒê√£ l·∫•y v√† l∆∞u {len(trending_searches)} t·ª´ kh√≥a hot t·ª´ Google Trends ({period}).")
                return trending_searches
            except Exception as e:
                logging.error(f"‚ö†Ô∏è L·ªói khi l·∫•y Google Trends (khu v·ª±c: {region or 'to√†n c·∫ßu'}): {e}")
                time.sleep(random.uniform(2, 5))
    
    # Fallback: L·∫•y g·ª£i √Ω t·ª´ Google
    logging.info("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c t·ª´ Google Trends, th·ª≠ l·∫•y g·ª£i √Ω Google...")
    suggestions = get_google_suggestions("c√¥ng ngh·ªá")
    if suggestions:
        cache = {"date": today, "period": period, "keywords": suggestions}
        with open(cache_file, 'w', encoding='utf-8') as f:
            json.dump(cache, f, ensure_ascii=False)
        logging.info(f"‚úÖ ƒê√£ l·∫•y v√† l∆∞u {len(suggestions)} t·ª´ kh√≥a t·ª´ g·ª£i √Ω Google.")
        return suggestions
    
    # Fallback: S·ª≠ d·ª•ng m·∫£ng d·ª± ph√≤ng
    logging.warning("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c t·ª´ kh√≥a t·ª´ Google, s·ª≠ d·ª•ng m·∫£ng d·ª± ph√≤ng...")
    used_keywords = load_keyword_cache()
    fallback_keywords = [k for k in FALLBACK_KEYWORDS if k not in used_keywords]
    if fallback_keywords:
        cache = {"date": today, "period": period, "keywords": fallback_keywords}
        with open(cache_file, 'w', encoding='utf-8') as f:
            json.dump(cache, f, ensure_ascii=False)
        logging.info(f"‚úÖ ƒê√£ s·ª≠ d·ª•ng {len(fallback_keywords)} t·ª´ kh√≥a t·ª´ m·∫£ng d·ª± ph√≤ng.")
        return fallback_keywords
    
    # Fallback cu·ªëi: T·ª´ kh√≥a ng·∫´u nhi√™n
    logging.warning("‚ö†Ô∏è H·∫øt t·ª´ kh√≥a d·ª± ph√≤ng, t·∫°o t·ª´ kh√≥a ng·∫´u nhi√™n...")
    random_keywords = [generate_random_keyword() for _ in range(50)]
    cache = {"date": today, "period": period, "keywords": random_keywords}
    with open(cache_file, 'w', encoding='utf-8') as f:
        json.dump(cache, f, ensure_ascii=False)
    return random_keywords

def init_driver(headless=False):
    """Kh·ªüi t·∫°o Edge driver."""
    logging.info("ƒêang kh·ªüi t·∫°o Edge driver...")
    try:
        service = Service(EDGE_DRIVER_PATH)
        options = Options()
        mobile_emulation = {"deviceName": "iPhone X"}
        options.add_experimental_option("mobileEmulation", mobile_emulation)
        options.add_argument("user-agent=Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 EdgiOS/46.3.23 Mobile/15E148 Safari/605.1.15")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")  # ·ªîn ƒë·ªãnh headless
        if headless:
            options.add_argument("--headless=new")  # Headless m·ªõi ·ªïn ƒë·ªãnh h∆°n
        driver = webdriver.Edge(service=service, options=options)
        driver.set_page_load_timeout(30)  # Timeout cho t·∫£i trang
        logging.info("‚úÖ Edge driver kh·ªüi t·∫°o th√†nh c√¥ng!")
        return driver
    except Exception as e:
        logging.error(f"‚ö†Ô∏è L·ªói khi kh·ªüi t·∫°o driver: {e}")
        return None

def tick_recaptcha_if_present(driver):
    """Ki·ªÉm tra v√† tick reCAPTCHA n·∫øu c√≥."""
    try:
        iframe = WebDriverWait(driver, 3).until(
            EC.presence_of_element_located((By.XPATH, "//iframe[contains(@title, 'reCAPTCHA')]"))
        )
        driver.switch_to.frame(iframe)
        logging.info("üîç T√¨m th·∫•y reCAPTCHA, ƒëang tick...")
        checkbox = WebDriverWait(driver, 3).until(
            EC.element_to_be_clickable((By.ID, "recaptcha-anchor"))
        )
        checkbox.click()
        logging.info("‚úÖ ƒê√£ tick reCAPTCHA")
        driver.switch_to.default_content()
        time.sleep(1)
    except TimeoutException:
        logging.info("‚ÑπÔ∏è Kh√¥ng c√≥ reCAPTCHA tr√™n trang n√†y.")
    except Exception as e:
        logging.error(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω reCAPTCHA: {e}")

def get_page_hash(driver):
    """T√≠nh hash c·ªßa trang hi·ªán t·∫°i."""
    try:
        return hashlib.sha256(driver.page_source.encode()).hexdigest()
    except Exception as e:
        logging.error(f"‚ö†Ô∏è L·ªói khi t√≠nh hash: {e}")
        return ""

def login_if_needed(driver):
    """ƒêƒÉng nh·∫≠p n·∫øu c·∫ßn."""
    try:
        driver.get("https://www.bing.com/rewards/panelflyout?partnerId=MemberCenterMobile")
        WebDriverWait(driver, TIMEOUT).until(
            EC.presence_of_element_located((By.CLASS_NAME, "promo_card"))
        )
        try:
            login_button = WebDriverWait(driver, 3).until(
                EC.presence_of_element_located((By.XPATH, "//a[contains(text(), 'Sign in')]"))
            )
            login_button.click()
            logging.info("ƒêang ƒëƒÉng nh·∫≠p...")
            email_field = WebDriverWait(driver, TIMEOUT).until(
                EC.presence_of_element_located((By.ID, "i0116"))
            )
            email_field.send_keys("YOUR_EMAIL")  # Thay b·∫±ng email c·ªßa b·∫°n
            email_field.send_keys(Keys.ENTER)
            password_field = WebDriverWait(driver, TIMEOUT).until(
                EC.presence_of_element_located((By.ID, "i0118"))
            )
            password_field.send_keys("YOUR_PASSWORD")  # Thay b·∫±ng m·∫≠t kh·∫©u c·ªßa b·∫°n
            password_field.send_keys(Keys.ENTER)
            WebDriverWait(driver, 15).until(
                EC.url_contains("rewards")
            )
            logging.info("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
        except TimeoutException:
            logging.info("‚ÑπÔ∏è ƒê√£ ƒëƒÉng nh·∫≠p ho·∫∑c kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p.")
    except Exception as e:
        logging.error(f"‚ö†Ô∏è L·ªói khi ƒëƒÉng nh·∫≠p: {e}")

def check_search_completion(driver):
    """Ki·ªÉm tra xem t√¨m ki·∫øm c√≥ ho√†n t·∫•t kh√¥ng, v·ªõi delay 5s ƒë·ªÉ xem panelflyout."""
    try:
        driver.get("https://www.bing.com/rewards/panelflyout")
        WebDriverWait(driver, TIMEOUT).until(
            EC.presence_of_element_located((By.CLASS_NAME, "promo_cont"))
        )
        logging.info("‚è≥ ƒêang t·∫°m d·ª´ng 5 gi√¢y ƒë·ªÉ xem trang panelflyout...")
        time.sleep(5)  # Delay 5s ƒë·ªÉ b·∫°n xem th√†nh qu·∫£
        try:
            points = driver.find_element(By.XPATH, "//div[@class='daily_search_row']/span[2]").text
            logging.info(f"‚úÖ Points hi·ªán t·∫°i: {points}")
            return True
        except NoSuchElementException:
            logging.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ ƒëi·ªÉm s·ªë, th·ª≠ ki·ªÉm tra trang ch√≠nh...")
            # Fallback: Ki·ªÉm tra trang Bing ch√≠nh
            driver.get("https://www.bing.com")
            WebDriverWait(driver, TIMEOUT).until(
                EC.presence_of_element_located((By.ID, "sb_form_q"))
            )
            logging.info("‚úÖ Trang Bing t·∫£i th√†nh c√¥ng, gi·∫£ ƒë·ªãnh t√¨m ki·∫øm ho√†n t·∫•t.")
            return True
    except Exception as e:
        logging.error(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra ho√†n t·∫•t t√¨m ki·∫øm: {e}")
        return False

def search_bing(driver, keyword):
    """Th·ª±c hi·ªán t√¨m ki·∫øm tr√™n Bing."""
    logging.info(f"üîç ƒêang th·ª±c hi·ªán t√¨m ki·∫øm: {keyword}")
    for attempt in range(MAX_RETRIES):
        try:
            driver.get("https://www.bing.com")
            WebDriverWait(driver, TIMEOUT).until(
                EC.presence_of_element_located((By.ID, "sb_form_q"))
            )
            tick_recaptcha_if_present(driver)
            search_box = driver.find_element(By.ID, "sb_form_q")
            search_box.clear()
            search_box.send_keys(keyword)
            search_box.send_keys(Keys.RETURN)
            logging.info(f"‚úÖ ƒê√£ nh·∫≠p v√† t√¨m ki·∫øm: {keyword}")
            WebDriverWait(driver, TIMEOUT).until(
                EC.presence_of_element_located((By.ID, "b_results"))
            )
            # T·ªëi ∆∞u h√≥a t∆∞∆°ng t√°c v·ªõi k·∫øt qu·∫£
            driver.execute_script("window.scrollBy(0, 500);")
            time.sleep(random.uniform(0.5, 2))
            results = driver.find_elements(By.CSS_SELECTOR, "#b_results .b_algo h2 a")
            if results:
                random.choice(results[:3]).click()
                time.sleep(random.uniform(1, 3))
            else:
                logging.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£, v·∫´n ti·∫øp t·ª•c...")
            logging.info("‚úÖ K·∫øt qu·∫£ t√¨m ki·∫øm ƒë√£ t·∫£i v√† t∆∞∆°ng t√°c.")
            return check_search_completion(driver)
        except TimeoutException:
            logging.error(f"‚ùå Timeout khi t·∫£i trang ho·∫∑c k·∫øt qu·∫£ (l·∫ßn {attempt + 1}/{MAX_RETRIES}).")
        except Exception as e:
            logging.error(f"‚ö†Ô∏è L·ªói trong qu√° tr√¨nh t√¨m ki·∫øm (l·∫ßn {attempt + 1}/{MAX_RETRIES}): {e}")
        time.sleep(random.uniform(1, 3))  # Gi·∫£m th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn th·ª≠
    logging.error(f"‚ùå T√¨m ki·∫øm {keyword} th·∫•t b·∫°i sau {MAX_RETRIES} l·∫ßn.")
    return False

def main():
    global driver
    driver = init_driver(headless=False)  # ƒê·∫∑t True ƒë·ªÉ ch·∫°y headless
    if not driver:
        logging.error("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver, tho√°t ch∆∞∆°ng tr√¨nh.")
        return

    signal.signal(signal.SIGINT, signal_handler)

    try:
        login_if_needed(driver)
        used_keywords = load_keyword_cache()
        last_keyword_fetch_date = None
        keywords = []
        search_count = 0

        while search_count < MAX_SEARCHES:
            current_date = datetime.now().strftime("%Y-%m-%d")
            if last_keyword_fetch_date != current_date:
                keywords = get_hot_keywords(period=TREND_PERIOD)
                last_keyword_fetch_date = current_date
                logging.info(f"üìã S·ªë t·ª´ kh√≥a hot ({TREND_PERIOD}): {len(keywords)}")

            available_keywords = [k for k in keywords if k not in used_keywords]
            if not available_keywords:
                logging.warning("‚ö†Ô∏è H·∫øt t·ª´ kh√≥a hot, th·ª≠ l·∫•y l·∫°i t·ª´ kh√≥a...")
                keywords = get_hot_keywords(period=TREND_PERIOD)
                available_keywords = [k for k in keywords if k not in used_keywords]
                if not available_keywords:
                    logging.warning("‚ö†Ô∏è V·∫´n kh√¥ng c√≥ t·ª´ kh√≥a, reset cache v√† th·ª≠ l·∫°i...")
                    used_keywords.clear()
                    save_keyword_cache(used_keywords)
                    keywords = get_hot_keywords(period=TREND_PERIOD)
                    available_keywords = [k for k in keywords if k not in used_keywords]

            keyword = random.choice(available_keywords)
            used_keywords.add(keyword)
            save_keyword_cache(used_keywords)

            if search_bing(driver, keyword):
                search_count += 1
                logging.info(f"‚úÖ T√¨m ki·∫øm {search_count}/{MAX_SEARCHES} ho√†n t·∫•t.")
            else:
                logging.warning(f"‚ö†Ô∏è T√¨m ki·∫øm {keyword} kh√¥ng th√†nh c√¥ng, th·ª≠ t·ª´ kh√≥a kh√°c.")

            current_hash = get_page_hash(driver)
            logging.info(f"üîñ Hash trang hi·ªán t·∫°i: {current_hash[:16]}...")
            time.sleep(random.uniform(3, 7))  # Th·ªùi gian ch·ªù gi·ªØa c√°c t√¨m ki·∫øm

    except Exception as e:
        logging.error(f"‚ùå L·ªói trong v√≤ng l·∫∑p ch√≠nh: {e}")
        traceback.print_exc()
    finally:
        logging.info("üõë K·∫øt th√∫c ch∆∞∆°ng tr√¨nh.")
        if driver:
            try:
                driver.quit()
            except:
                pass

if __name__ == "__main__":
    main()